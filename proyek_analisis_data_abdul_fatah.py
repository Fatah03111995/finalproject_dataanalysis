# -*- coding: utf-8 -*-
"""Proyek Analisis Data Abdul Fatah.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YuCOJiZ9krrGEogD2bI74X574cJxYrQc

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** Abdul Fatah
- **Email:** abdulfatah.code@gmail.com
- **ID Dicoding:** abdul_fatah_18te

## Menentukan Pertanyaan Bisnis

- Di bulan dan musim apa saja rental sepeda menunjukkan performa terbaik ?
- Di kondisi seperti apa pelanggan memilih untuk terdaftar sebagai user ketika merental sepeda ?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data

#### Melakukan import dataset
"""

df = pd.read_csv('https://drive.google.com/uc?id=16k6qPzr193bNf57w5CIri5Xz-iOy5N55')
df

"""**Insight:**
- Data Terdiri dari 16 kolom dan 731 baris

#### Menampilkan informasi umum terkait dataset
"""

df.info()

"""**Insight:**
- data berisi 15 feature, sebagian mengenai waktu pemesanan, sebagian yang lain terkait kondisi cuaca ketika itu
- beberapa data masih dalam bentuk label

### Assessing Data

#### Pengecekan duplikasi data
"""

print('Jumlah data yang teduplikasi : ', df.duplicated().sum())

"""#### Pengecekan data yang kosong"""

df.isna().sum()

"""#### Outlier

Tidak dilakukan pengecekan outlier, karena pada feature temp, atemp, hum, windspeed menunjukkan nilai yang unik, khas yang menunjukkan kondisi yang pasti berbeda beda setiap waktunya

#### Pengecekan Tipe Data setiap feature
"""

df.info()

"""#### Insight

**Insight:**
- Tidak terdapat data yang di duplikasi
- Tidak terdapat data yang hilang
- feature dteday memiliki tipe data object harusnya tipe data tanggal
- beberapa feature masih berupa data label

### Cleaning Data

#### Mengubah tipe data pada feature dteday
"""

df['dteday'] = pd.to_datetime(df['dteday'])
df.info()

"""#### Mengembalikan data label menjadi data asalnya, agar mudah di explore"""

data = df.copy()
data['season'] = data['season'].map({1: 'spring', 2: 'summer', 3: 'fall', 4: 'winter'})
data['yr'] = data['yr'].map({0: 2011, 1: 2012})
data['weathersit'] = data['weathersit'].map({1: 'clear', 2: 'mist', 3: 'light rain', 4: 'heavy rain'})
data['workingday'] = data['workingday'].map({0: 'no', 1: 'yes'})
data['holiday'] = data['holiday'].map({0: 'no', 1: 'yes'})
data

"""**Insight:**
- data sudah dalam keadaan bersih dan mudah untuk dilakukan explore lebih lanjut

## Exploratory Data Analysis (EDA)

### Explore ...

#### Melihat jumlah rental setiap tahun, detail setiap bulan
"""

byyear = data.groupby(by=['yr', 'mnth'])['cnt'].sum().reset_index()
byyear.sort_values(by='cnt', ascending=False)

"""#### Melihat jumlah rental setiap tahun, detail setiap musim"""

byseason = data.groupby(by=['yr', 'season'])['cnt'].sum().reset_index()
byseason.sort_values(by='cnt', ascending=False)

"""#### Melihat jumlah rental ketika holiday"""

byholiday = data.groupby(by='holiday')['cnt'].sum().sort_values(ascending=False)
byholiday

"""#### Melihat jumlah rental ketika workday"""

byworkday = data.groupby(by='workingday')['cnt'].sum().sort_values(ascending=False)
byworkday

"""#### Melihat jumlah rental setiap tahun, detail setiap kondisi cuaca"""

byweather = data.groupby(by=['yr', 'weathersit'])['cnt'].sum().sort_values(ascending=False)
byweather

"""#### Melihat kondisi cuaca, apakah ada hari dimana terjadi hujan lebat"""

heavyrain = data[data['weathersit'] == 'heavy rain']
heavyrain

"""#### Menghitung penambahan registered user disetiap bulan dan tahunnya"""

data['amnt_newmember'] = data['registered'].diff()
data.fillna(0, inplace=True)
newmember_byyear = data.groupby(by=['yr', 'mnth'])['amnt_newmember'].sum().reset_index()
newmember_byyear.sort_values(by='amnt_newmember', ascending=False)

"""#### Jumlah Penambahan registered user setiap musim"""

newmember_byseason = data.groupby(by=['yr', 'season'])['amnt_newmember'].sum().reset_index()
newmember_byseason.sort_values(by='amnt_newmember', ascending=False)

"""#### Melihat Musim pada bulan dengan penggunaan rental terbanyak"""

# juni - juli 2011
pd.set_option('display.max_rows', None)
data[(data['mnth'] == 6) & (data['yr'] == 2011) | (data['mnth'] == 7) & (data['yr'] == 2011)]

# agustus - september 2012
data[ (data['mnth'] == 8) & (data['yr'] == 2012) | (data['mnth'] == 9) & (data['yr'] == 2012)]

"""#### Insight

**Insight:**
- rental terbanyak terdapat pada musim gugur dan paling sedkit pada musim semi
- rental terbanyak di tahun 2012 terjadi pada bulan September, dan pada tahun 2011 terjadi pada bulan Juni
- Kondisi cuaca yang paling digemari oleh pelanggan rental sepeda adalah cuaca cerah
- Penambahan registered user dalam kurun waktu 2 tahun selalu terjadi penambhana pada musim gugur dan musim panas

## Visualization & Explanatory Analysis

### Pertanyaan 1: Di bulan dan musim apa saja rental sepeda menunjukkan performa terbaik ?
"""

# grafik batang jumlah pengguna rental sepeda setiap bulan

maxdata_2011 = byyear[byyear['yr'] == 2011]['cnt'].max()
maxdata_2012 = byyear[byyear['yr'] == 2012]['cnt'].max()
year = [2011, 2012]

plt.figure(figsize=(10, 5))

for i in range(len(year)):
  maxdata = [maxdata_2011, maxdata_2012]
  colors = ['red' if cnt == maxdata[i] else 'grey' for cnt in byyear[byyear['yr'] == year[i]]['cnt']]
  plt.subplot(1, 2, i+1)
  sns.barplot(data=byyear[byyear['yr'] == year[i]], x='mnth', y='cnt',
              palette = colors,)
  plt.title(f'{year[i]}')
  plt.xlabel('Bulan')
  plt.ylabel('Jumlah Pengguna')

plt.tight_layout()
plt.show()

# grafik batang jumlah pengguna rental setiap musim
maxdata_season2021 = byseason[byseason['yr'] == 2011]['cnt'].max()
maxdata_season2022 = byseason[byseason['yr'] == 2012]['cnt'].max()
year = [2011, 2012]

plt.figure(figsize=(10, 5))

for i in range(len(year)):
  maxdata = [maxdata_season2021, maxdata_season2022]
  colors = ['red' if cnt == maxdata[i] else 'grey' for cnt in byseason[byseason['yr'] == year[i]]['cnt']]
  plt.subplot(1, 2, i+1)
  sns.barplot(data=byseason[byseason['yr'] == year[i]], x='season', y='cnt',
              palette = colors,)
  plt.title(f'{year[i]}')
  plt.xlabel('Musim')
  plt.ylabel('Jumlah Pengguna')

plt.tight_layout()
plt.show()

"""### Pertanyaan 2: Di kondisi seperti apa pelanggan memilih untuk terdaftar seabagai user ketika merental sepeda ?"""

maxdata_newmember_2021 = newmember_byyear[newmember_byyear['yr'] == 2011]['amnt_newmember'].max()
maxdata_newmember_2022 = newmember_byyear[newmember_byyear['yr'] == 2012]['amnt_newmember'].max()
year = [2011, 2012]

plt.figure(figsize=(10, 5))

for i in range(len(year)):
  maxdata = [maxdata_newmember_2021, maxdata_newmember_2022]
  colors = ['red' if cnt     == maxdata[i] else 'grey' for cnt in newmember_byyear[newmember_byyear['yr'] == year[i]]['amnt_newmember']]
  plt.subplot(1, 2, i+1)
  sns.barplot(data=newmember_byyear[newmember_byyear['yr'] == year[i]], x='mnth', y='amnt_newmember',
              palette = colors,)
  plt.title(f'{year[i]}')
  plt.xlabel('Bulan')
  plt.ylabel('Jumlah Pengguna Terdaftar')

plt.tight_layout()
plt.show()

maxdata_newmemberseason_2021 = newmember_byseason[newmember_byseason['yr'] == 2011]['amnt_newmember'].max()
maxdata_newmemberseason_2022 = newmember_byseason[newmember_byseason['yr'] == 2012]['amnt_newmember'].max()

year = [2011, 2012]

plt.figure(figsize=(10, 5))

for i in range(len(year)):
  maxdata = [maxdata_newmemberseason_2021, maxdata_newmemberseason_2022]
  colors = ['red' if cnt == maxdata[i] else 'grey' for cnt in newmember_byseason[newmember_byseason['yr'] == year[i]]['amnt_newmember']]
  plt.subplot(1, 2, i+1)
  sns.barplot(data=newmember_byseason[newmember_byseason['yr'] == year[i]], x='season', y='amnt_newmember',
              palette = colors,)
  plt.title(f'{year[i]}')
  plt.xlabel('Musim')
  plt.ylabel('Jumlah Pengguna Terdaftar')

plt.tight_layout()
plt.show()

"""**Insight:**
- pengguna rental terbanyak terdapat pada bulan Juni - Juli pada tahun 2011, dan Agustus - September pada tahun 2012 yang bertepatan dengan musim gugur
- Pengguna rental cenderung mendaftar sebagai user di akhir musim semi, atau di awal musim panas

## Analisis Lanjutan (Opsional)
"""

# CLUSTERING BERDASARKAN JUMLAH PELANGGAN YANG MELAKUKAN RENTAL
# PENGGUNAAN TINGGI : > 7000
# PENGGUNAAN SEDANG : 3000 - 6000
# PENGGUNAAN RENDAH : < 3000

df['cluster'] = df['cnt'].apply(lambda x: 'tinggi' if x > 6000 else ('sedang' if x > 3000 else 'rendah'))
clustering_data = df.groupby(by='cluster')['dteday'].count().reset_index()
clustering_data

# VISUALISASI
plt.figure(figsize=(15, 5))
sns.barplot(data=clustering_data, x='cluster', y='dteday')
plt.ylabel('Jumlah Hari')
plt.xlabel('Cluster')
plt.title('Cluster Pengguna Rental Sepeda')
plt.show()

"""## Conclusion

**- Conclution : Di bulan dan musim apa saja rental sepeda menunjukkan performa terbaik ?**

pengguna rental terbanyak terdapat pada bulan Juni - Juli pada tahun 2011, dan Agustus - September pada tahun 2012 yang bertepatan dengan musim gugur

**- Conclution : Di kondisi seperti apa pelanggan memilih untuk terdaftar sebagai user ketika merental sepeda ?**

Pengguna rental cenderung mendaftar sebagai user di akhir musim semi, atau di awal musim panas

**- Conclution : Clustering**

Cluster pertama penggunaan rendah sebanyak 172 hari
Cluster kedua penggunaan sedang sebanyak 379 hari
cluster ketiga penggunaan tinggi sebanyak 180 hari
"""

# DOWNLOAD DF
df.to_csv('df_clean.csv')
from google.colab import files

# Download file
files.download('df_clean.csv')

